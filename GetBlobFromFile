#!/bin/bash

##cosmetic functions and Variables
##Colors
RED='\033[0;31m'
YELLOW='\033[0;33m'
GREEN='\033[0;32m'
NC='\033[0m'
BLUE='\033[0;34m'
MAGENTA='\033[0;35m'

##Break function for readabillity
BR()
{
  echo "  "
}

##DoubleBreak function for readabillity
DBR()
{
  echo " "
  echo " "
}

##paths
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null && pwd )"    ##Script directory
iosFile="$DIR/Lists/iosList.csv"                                      ##path for the iosList
deviceFile="$DIR/Lists/DeviceList.csv"                                ##path for the DeviceList
bloblist="$DIR/Lists/BlobList.csv"                                    ##path for the bloblist
##path to TSSCHECKER_OLD
# tssPath="$DIR/tsschecker_macos"
tssPath="$DIR/tsschecker"                                             ##path to TSSCHECKER_NEW
IFS=";"                                                               #setting the delimiter
DATE=$(date)                                                          #Fix the date Variable

iosVersionArray=()                                                    ##predeclare the iosversion array

#function to grab the wanted ios versions
ios()
{
  while read ios
  do
    iosVersionArray+=("$ios")
  done < $iosFile
  ##for testing:
  printf "${YELLOW}Downloading blobs for these ios versions:${NC}\n"
  for index  in ${!iosVersionArray[*]}
  do
    echo ${iosVersionArray[$index]}
  done
}

blob()
{
  ##Getting the arraylenght from the devicelist
  deviceArrayLength=$(grep -o  'iP' $deviceFile | wc -l)
  ##Getting the arraylenght form the iosversions
  IOSArrayLength=${#iosVersionArray[@]}
  ##Setting the loop counters
  deviceCounter=0
  iosCounter=0

  while [[ $iosVersionArray ]]
  iosVersion=${iosVersionArray[$iosCounter]}
  BR
  do
    while read ECID UDID serial devicetype devicemodel
    do
      printf "~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-\n"
      printf "${RED}DEBUGGING:${NC}\n"
      printf "${BLUE}ECID: $ECID\n"
      printf "UDID: $UDID\n"
      printf "Serial: $serial\n"
      printf "devicetype: $devicetype\n"
      printf "devicemodel: $devicemodel${NC}\n"

      ##check for BlobSave directory
      if [[ -d "$DIR/BlobSave" ]]
      then
        printf "${GREEN}BlobSave directory is available${NC}\n"
        BR
      else
        printf "${RED}BlobSave directory is not available,${GREEN} creating the directory${NC}\n"
        BR
        mkdir $DIR/BlobSave
      fi

      ##check for save directory
      if [ -d "$DIR/BlobSave/$serial/$iosVersion" ]
      then
        printf "${GREEN}Storage directory available, proceeding downloading the blob${NC}\n"
      else
        printf "${RED}directory not available, ${GREEN}creating the needed storage directories${NC}\n"
        BR
        cd $DIR/BlobSave
        mkdir $serial
        mkdir $serial/$iosVersion
        printf "${YELLOW}$dir "/BlobSave/"$serial/$iosVersion "created"${NC}\n"
        BR
      fi

      ## getting the blob
      #BlobSavePath
      BlobSavePath="$DIR/BlobSave/$serial/$iosVersion"
      $tssPath -d "$devicetype" -i "$iosVersion" --boardconfig "$devicemodel" -e "$ECID" -s --save-path "$BlobSavePath"
      pathforCSV=$(ls -rt  $BlobSavePath  | tail -n 1)
      echo "$serial;$ECID;$iosVersion;$(date);$pathforCSV;$BlobSavePath/$pathforCSV" >> $bloblist
      printf "${YELLOW}Blob saved to: $BlobSavePath ${NC}\n"
      printf "~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-\n"
      BR

    done < $deviceFile

    ((iosCounter++))

    if [[ $iosCounter -eq $IOSArrayLength ]]
    then
      printf "${GREEN}All available blobs are saved!"
      exit
    fi
  done
}
ios
blob
